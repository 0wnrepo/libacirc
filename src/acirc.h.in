#ifndef __ACIRC_H__
#define __ACIRC_H__

@ACIRC_HAVE_GMP@

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#ifdef HAVE_GMP
#include <gmp.h>
#endif

#define ACIRC_OK 0
#define ACIRC_ERR (-1)

typedef unsigned long acircref;
typedef unsigned long input_id;

typedef enum {
    XINPUT,
    YINPUT,
    ADD,
    SUB,
    MUL,
    ID,
} acirc_operation;

struct acirc_args_t {
    acirc_operation op;
    acircref *args;
    size_t nargs;
    bool is_output;
};

typedef struct {
    size_t ninputs;
    size_t nconsts;
    size_t ngates;
    size_t nrefs;
    size_t ntests;
    size_t noutputs;
    struct acirc_args_t *gates;
    acircref *outrefs;
    int *consts;
    int **testinps;
    int **testouts;
    size_t _ref_alloc; // alloc size of gates
    size_t _test_alloc;
    size_t _outref_alloc;
    size_t _consts_alloc;
    bool _degree_memo_allocated;
    size_t **_degree_memo;
    bool   **_degree_memoed;
} acirc;

#ifdef __cplusplus
extern "C" {
#endif

void acirc_init(acirc *c);
void acirc_clear(acirc *c);
int acirc_parse(acirc *c, const char *const filename);
acirc * acirc_from_file(const char *const filename);
bool acirc_to_file(const acirc *const c, const char *const fname);

// evaluation
int acirc_eval (acirc *c, acircref ref, int *xs);

// run all tests
bool acirc_ensure(acirc *c, bool verbose);

// topological orderings
size_t acirc_topological_order(acircref *topo, acirc *c, acircref ref);

typedef struct {
    int nlevels;
    int **levels;
    int *level_sizes;
} acirc_topo_levels;

acirc_topo_levels* acirc_topological_levels(acirc *c, acircref root);
void acirc_topo_levels_destroy(acirc_topo_levels *topo);

// degree calculations
size_t acirc_depth        (acirc *c, acircref ref);
size_t acirc_degree       (acirc *c, acircref ref);
size_t acirc_var_degree   (acirc *c, acircref ref, input_id id);
size_t acirc_const_degree (acirc *c, acircref ref);

size_t acirc_max_degree       (acirc *c);
size_t acirc_max_var_degree   (acirc *c, input_id id);
size_t acirc_max_const_degree (acirc *c);

size_t acirc_delta (acirc *c); // sum of all the var degrees and the const degree, maximized over outputs

// construction
void acirc_add_test   (acirc *c, char *inp, char *out);
void acirc_add_xinput (acirc *c, acircref ref, size_t input_id);
void acirc_add_yinput (acirc *c, acircref ref, size_t const_id, int val);
void acirc_add_gate   (acirc *c, acircref ref, acirc_operation op, int xref, int yref, bool is_output);

// helpers
acirc_operation acirc_str2op(char *s);

#ifdef HAVE_GMP
void acirc_eval_mpz_mod(mpz_t rop, acirc *c, acircref root, mpz_t *xs,
                        mpz_t *ys, mpz_t modulus);

void acirc_eval_mpz_mod_memo(mpz_t rop, acirc *c, acircref root, mpz_t *xs,
                             mpz_t *ys, mpz_t modulus, bool *known, mpz_t *cache);
#endif

#ifdef __cplusplus
}
#endif

#endif
