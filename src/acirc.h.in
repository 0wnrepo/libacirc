#ifndef __ACIRC_H__
#define __ACIRC_H__

@ACIRC_HAVE_GMP@

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <unistd.h>
#ifdef HAVE_GMP
#include <gmp.h>
#endif

#define ACIRC_OK    0
#define ACIRC_ERR (-1)

/* #ifdef __cplusplus */
/* extern "C" { */
/* #endif */

typedef ssize_t acircref;
typedef struct acirc acirc;

typedef enum acirc_operation {
    OP_INPUT,
    OP_CONST,
    OP_ADD,
    OP_SUB,
    OP_MUL,
    OP_SET,
    OP_EXTERNAL,
} acirc_operation;

acirc_operation acirc_str2op(char *s);
char *acirc_op2str(acirc_operation op);

typedef struct {
    acirc_operation op;
    acircref *args;
    size_t nargs;
    /* struct for external operations */
    struct {
        char *name;
        void *external;
    };
} acirc_gate_t;

void acirc_init_gate(acirc_gate_t *gate, acirc_operation op, acircref *args,
                     size_t nargs);

typedef struct {
    acirc_gate_t *gates;
    size_t n;
    size_t _alloc;
} acirc_gates_t;

typedef void * (*extgate_build)(acircref, const acircref *, size_t);
typedef acircref (*extgate_eval)(const acirc_gate_t *);
typedef struct {
    char *name;
    extgate_build build;
    extgate_eval eval;
} acirc_extgate_t;

typedef struct {
    acirc_extgate_t *gates;
    size_t n;
} acirc_extgates_t;

void acirc_add_new_extgate(acirc_extgates_t *gates, const char *name,
                           extgate_build build, extgate_eval eval);
acircref acirc_eval_extgate(const acirc_extgates_t *extgates,
                            const acirc_gate_t *gate);

typedef struct {
    int **inps;
    int **outs;
    size_t n;
} acirc_tests_t;

typedef struct {
    acircref *buf;
    size_t n;
} acirc_outputs_t;

typedef struct {
    int *buf;
    size_t n;
    size_t _alloc;
} acirc_consts_t;

typedef struct {
    char *name;
    int (*f)(acirc *, const char **, size_t);
} acirc_command_t;

typedef struct {
    acirc_command_t *commands;
    size_t n;
} acirc_commands_t;

typedef struct {
    void *buf;
    size_t n;
} acirc_extras_t;

struct acirc {
    size_t ninputs;
    acirc_gates_t gates;
    acirc_tests_t tests;
    acirc_outputs_t outputs;
    acirc_consts_t consts;
    acirc_commands_t commands;
    acirc_extgates_t extgates;
    acirc_extras_t extras;

    bool _degree_memo_allocated;
    size_t **_degree_memo;
    bool   **_degree_memoed;
};

void acirc_init(acirc *c);
void acirc_clear(acirc *c);
int acirc_parse(acirc *c, const char *fname);
acirc * acirc_from_file(const char *fname);
bool acirc_to_file(const acirc *c, const char *fname);
void acirc_verbose(uint32_t verbose);
int acirc_eval(acirc *c, acircref ref, int *xs);
bool acirc_ensure(acirc *c);

typedef struct {
    int nlevels;
    int **levels;
    int *level_sizes;
} acirc_topo_levels;

size_t acirc_topological_order(acircref *topo, acirc *c, acircref ref);
acirc_topo_levels* acirc_topological_levels(acirc *c, acircref root);
void acirc_topo_levels_destroy(acirc_topo_levels *topo);

/* degree calculations */

size_t acirc_depth        (const acirc *c, acircref ref);
size_t acirc_degree       (const acirc *c, acircref ref);
size_t acirc_var_degree   (acirc *c, acircref ref, acircref id);
size_t acirc_const_degree (acirc *c, acircref ref);

size_t acirc_max_degree       (const acirc *c);
size_t acirc_max_var_degree   (acirc *c, acircref id);
size_t acirc_max_const_degree (acirc *c);
/* computes the degree if all ops result in an additive increase */
size_t acirc_max_total_degree(acirc *c);

size_t acirc_delta(acirc *c);

/* helper functions */

size_t acirc_nrefs(const acirc *c);

/* GMP functions */

#ifdef HAVE_GMP
void acirc_eval_mpz_mod_memo(mpz_t rop, acirc *c, acircref root,
                             const mpz_t *xs, const mpz_t *ys,
                             const mpz_t modulus, bool *known,
                             mpz_t *cache);
void acirc_eval_mpz_mod(mpz_t rop, acirc *c, acircref root,
                        const mpz_t *xs, const mpz_t *ys,
                        const mpz_t modulus);
bool acirc_ensure_mpz(acirc *c);
#endif

/* #ifdef __cplusplus */
/* } */
/* #endif */

#endif
