#ifndef __ACIRC_H__
#define __ACIRC_H__

@ACIRC_HAVE_GMP@

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <unistd.h>
#ifdef HAVE_GMP
#include <gmp.h>
#endif

#define ACIRC_OK 0
#define ACIRC_ERR (-1)

typedef ssize_t acircref;
typedef ssize_t input_id;

typedef struct acirc_args_t acirc_args_t;

typedef enum acirc_operation {
    OP_INPUT,
    OP_INPUT_PLAINTEXT,
    OP_CONST,
    OP_ADD,
    OP_SUB,
    OP_MUL,
    OP_ID,
} acirc_operation;

typedef struct {
    size_t ninputs;
    size_t npinputs;
    size_t nconsts;
    size_t ngates;
    size_t nrefs;
    size_t ntests;
    size_t noutputs;
    struct acirc_args_t *gates;
    acircref *outrefs;
    int *consts;
    int **testinps;
    int **testouts;
    size_t _ref_alloc; // alloc size of gates
    size_t _test_alloc;
    size_t _outref_alloc;
    size_t _consts_alloc;
    bool _degree_memo_allocated;
    size_t **_degree_memo;
    bool   **_degree_memoed;
} acirc;

#ifdef __cplusplus
extern "C" {
#endif

void acirc_init(acirc *c);
void acirc_clear(acirc *c);
int acirc_parse(acirc *c, const char *const filename);
acirc * acirc_from_file(const char *const filename);
bool acirc_to_file(const acirc *const c, const char *const fname);

void acirc_verbose(bool verbose);

// evaluation
int acirc_eval (acirc *c, acircref ref, int *xs);

// run all tests
bool acirc_ensure(acirc *c);

// topological orderings
size_t acirc_topological_order(acircref *topo, acirc *c, acircref ref);

typedef struct {
    int nlevels;
    int **levels;
    int *level_sizes;
} acirc_topo_levels;

acirc_topo_levels* acirc_topological_levels(acirc *c, acircref root);
void acirc_topo_levels_destroy(acirc_topo_levels *topo);

// degree calculations
size_t acirc_depth        (const acirc *const c, acircref ref);
size_t acirc_degree       (const acirc *const c, acircref ref);
size_t acirc_var_degree   (acirc *const c, acircref ref, input_id id);
size_t acirc_const_degree (acirc *const c, acircref ref);

size_t acirc_max_degree       (const acirc *const c);
size_t acirc_max_var_degree   (acirc *const c, input_id id);
size_t acirc_max_const_degree (acirc *const c);
/* computes the degree if all ops result in an additive increase */
size_t acirc_max_total_degree(acirc *const c);

size_t acirc_delta (acirc *const c);

// construction
void acirc_add_test(acirc *const c, const char *const inpstr,
                    const char *const outstr);
void acirc_add_input(acirc *const c, acircref ref, acircref id);
void acirc_add_input_plaintext(acirc *const c, acircref ref, acircref id);
void acirc_add_const(acirc *const c, acircref ref, int val);
void acirc_add_gate(acirc *const c, acircref ref, acirc_operation op,
                    const acircref *const refs, size_t n);
void acirc_add_output(acirc *const c, acircref ref);

// helpers
acirc_operation acirc_str2op(char *s);
char *acirc_op2str(acirc_operation op);

#ifdef HAVE_GMP
void acirc_eval_mpz_mod(mpz_t rop, acirc *const c, acircref root, mpz_t *xs,
                        mpz_t *ys, const mpz_t modulus);

void acirc_eval_mpz_mod_memo(mpz_t rop, acirc *const c, acircref root, mpz_t *xs,
                             mpz_t *ys, const mpz_t modulus, bool *known,
                             mpz_t *cache);
#endif

#ifdef __cplusplus
}
#endif

#endif
